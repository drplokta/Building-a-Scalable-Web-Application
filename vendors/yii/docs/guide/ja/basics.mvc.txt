モデル-ビュー-コントローラ (MVC)
===========================

Yiiはウェブプログラミングで幅広く採用されている、モデル-ビュー-コントローラ (MVC) デザインパターンを実装しています。
MVCはユーザインタフェースの考慮からビジネスロジックを分離することが目的であり、開発者はそれぞれの部分お互いに影響することが無く容易に変更することが可能です。
MVCにおいては、モデル(M)は情報(データ)とビジネスルールを表現し、ビュー(V)はフォームやテキストのようなユーザインタフェースを含み、コントローラ(C)はモデルとビューの通信を管理します。

MVCの他に、Yiiはリクエスト処理のコンテキストを実行する、アプリケーションと呼ばれるフロントコントローラを導入しました。
アプリケーションはユーザリクエストを解析し、さらに処理を進めるために適切なコントローラへ処理を渡します。

以下の図はYiiアプリケーションの静的な構造を示します。

![Yiiアプリケーションの静的な構造](structure.png)

典型的なワークフロー
------------------
以下の図はYiiアプリケーションがユーザリクエストを処理する時の典型的なワークフローを示します。

![ユーザリクエストを処理する時の典型的なワークフロー](flow.png)

   1. ユーザはURL`http://www.example.com/index.php?r=post/show&id=1`としてリクエストを発行します。
ウェブサーバはブートストラップスクリプト`index.php`を実行してリクエストを処理します。
   2. ブートストラップスクリプトはアプリケーション[アプリケーション](/doc/guide/basics.application)インスタンスを生成し、それを実行します。
   3. アプリケーションは詳細なユーザリクエスト情報を`request`という名前の[アプリケーションコンポーネント](/doc/guide/basics.application#application-component)から得ます。
   4. アプリケーションは要求を受けた[コントローラ](/doc/guide/basics.controller)と[アクション](/doc/guide/basics.controller#action)を、`urlManager`という名前のアプリケーションコンポーネントの助けによって得ます。
例えば、コントローラは`post`でそのクラスは`PostController`であり、アクションは`show`で実際の関数名はコントローラによって決定されます。
   5. アプリケーションはユーザリクエストをさらに処理するために要求されたコントローラのインスタンスを生成します。
コントローラはアクション`show`がコントローラクラスの`actionShow`メソッドであると決定します。
そして、アクションに応じた、例えばアクセス制御とかベンチマークとかのフィルタを生成し、実行します。
アクションはフィルタにより認められた場合に限り実行されます。
   6. アクションは`Post`[モデル](/doc/guide/basics.model) のID番号1をデータベースから読み出します。
   7. アクションは`Post`モデルを用いて`show`という名前の[ビュー](/doc/guide/basics.view)を表示します。
   8. ビューは`Post`モデルからアトリビュートを読み出し、表示します。
   9. ビューはいくつかの[ウィジェット](/doc/guide/basics.view#widget)を実行します。
   10. ビューが描画した結果は[レイアウト](/doc/guide/basics.view#layout)に埋め込まれます。
   11. アクションはビューの描画を完了させ、結果をユーザに表示します。


<div class="revision">$Id: basics.mvc.txt 419 2008-12-28 05:35:39Z qiang.xue $</div>
