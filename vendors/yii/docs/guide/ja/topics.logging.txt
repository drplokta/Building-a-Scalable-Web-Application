ロギング
=======

Yiiには柔軟で拡張可能なログ機能が備わっています。
記録されたメッセージはログレベルとメッセージカテゴリによって分類可能です。
レベルとカテゴリフィルターを使うことで、特定のメッセージをファイルやメール、
ブラウザといった別の送り先に送信することも可能です。

メッセージをログに記録する
---------------

メッセージは [Yii::log]か[Yii::trace]のどちらかを呼ぶことでログに記録可能です。
この二つのメソッドの違いは、後者はアプリケーションが[debug mode](/doc/guide/basics.entry#debug-mode)
で動いているときだけメッセージを記録するということです。

~~~
[php]
Yii::log($message, $level, $category);
Yii::trace($message, $category);
~~~

メッセージをログに記録するとき、カテゴリとレベルを指定する必要があります。
カテゴリは`xxx.yyy.zzz`というフォーマットの文字列です。
これは[path alias](/doc/guide/basics.namespace)と似ています。
例えば、[CController]でメッセージがログに記録されるとすると、
 `system.web.CController`というカテゴリを使うことができるでしょう。
メッセージレベルは以下の値のいずれかになります。

   - `trace`: [Yii::trace]によって利用されるレベル 開発の間アプリケーションの実行フローをトレースする

   - `info`: 一般的な情報向け

   - `profile`: 後ほど述べるパフォーマンスプロファイルについて

   - `warning`: 警告メッセージ

   - `error`: 致命的なエラーメッセージ

メッセージルーティング
---------------

[Yii::log]か[Yii::trace]によって記録されたメッセージはメモリに一時的に保持されます。
多くの場合、メッセージをブラウザに表示したり、ファイルやメールといった継続的ストレージに保存する必要があります。
これを*メッセージルーティング*と呼びます。つまり、メッセージを異なった送り先に送信するという意味です。

Yiiにおけるメッセージルーティングは、[CLogRouter]アプリケーションコンポーネントによって制御されます。
このコンポーネントは、いわゆる*ログルート*のセットを管理します。
各ログルートは一つの送信先を表します。
メッセージはログルートに沿って送信され、レベルとカテゴリによってフィルタすることが可能です。

メッセージルーティングを使うには、[CLogRouter]アプリケーションコンポーネントをインストールし、
プリロードする必要があります。
また、コンポーネントの[routes|CLogRouter::routes]プロパティに必要なログルートを設定する必要があります。
以下では[application configuration](/doc/guide/basics.application#application-configuration)の例を提示します。

~~~
[php]
array(
	......
	'preload'=>array('log'),
	'components'=>array(
		......
		'log'=>array(
			'class'=>'CLogRouter',
			'routes'=>array(
				array(
					'class'=>'CFileLogRoute',
					'levels'=>'trace, info',
					'categories'=>'system.*',
				),
				array(
					'class'=>'CEmailLogRoute',
					'levels'=>'error, warning',
					'emails'=>'admin@example.com',
				),
			),
		),
	),
)
~~~

この例では二つのログルートを設定しています。
最初のルートは[CFileLogRoute]で、これはメッセージをランタイムディレクトリ以下のファイルに保存します。
このルートで保存されるのは、レベルが`trace` か `info`で、かつカテゴリが`system.`で始まるものだけです。
二番目のルートは[CEmailLogRoute]で、指定されたメールアドレス宛にメッセージを送信します。
このルートでは、レベルが`error` か `warning` のものだけが送信されます。

Yiiでは以下のログルートが利用可能です。

   - [CDbLogRoute]: メッセージをデータベースに保存する
   - [CEmailLogRoute]: メッセージを指定されたメールアドレスに送信する
   - [CFileLogRoute]: メッセージをアプリケーションのラン多無ディレクトリ以下にファイルとして保存する
   - [CWebLogRoute]: メッセージをウェブページの最後に表示する
   - [CProfileLogRoute]: プロファイルメッセージをウェブページ最後に表示する

> 情報: メッセージルーティングはリクエストサイクルの最後で[onEndRequest|CApplication::onEndRequest] イベントが発生したときに
実行されます。
明示的に現在のリクエストの実行を終了するためには、`die()` や `exit()`ではなく、[CApplication::end()]を読んでください。
なぜなら、[CApplication::end()]は[onEndRequest|CApplication::onEndRequest]を発生させ、メッセージが適切にログに記録されるからです。

### メッセージのフィルタリング

先ほど述べたように、メッセージをログルートに送信する前に、レベルとカテゴリによってフィルタリング可能です。
これはログルートの[levels|CLogRoute::levels]プロパティと、
[categories|CLogRoute::categories]プロパティを設定することで実現されます。
複数のレベルやカテゴリを記述する場合には、カンマで区切ります。

メッセージカテゴリは`xxx.yyy.zzz`という書式なので、これらをカテゴリ階層として取り扱えます。
具体的に言うと、`xxx`は`xxx.yyy`の親であり、さらに`xxx.yyy`は`xxx.yyy.zzz`の親であるということです。
したがって、`xxx.*`と書くことで、`xxx`カテゴリとそれ以下の階層すべてを指し示すことができます。

パフォーマンスプロファイリング
---------------------

パフォーマンスプロファイリングは特殊なメッセージログです。
特定のコードブロックが必要とする実行時間を計測するために使われ、
パフォーマンスのボトルネックがどこにあるかを見つけ出します。

パフォーマンスプロファイリングを使うには、どのコードブロックが計測されるのかを指定する必要があります。
以下のメソッドを、ブロックの最初と最後に挿入することで印をつけます。

~~~
[php]
Yii::beginProfile('blockID');
...計測対象のコードブロック...
Yii::endProfile('blockID');
~~~

`blockID`はコードブロックの一意なIDです

コードブロックは適切にネスとする必要があることに注意してください。
すなわち、コードブロックを交差させることはできません。
二つのコードブロックは並列になっているか、一方が片方を完全に含んでいなければなりません。

プロファイルの結果を表示するには、[CLogRouter]アプリケーションコンポーネントをインストールする必要があります。
これは通常のメッセージルーティングのときと同じです。
[CProfileLogRoute]ルートが計測結果を現在のページの末尾に表示します。

<div class="revision">$Id: topics.logging.txt 922 2009-04-05 21:36:33Z qiang.xue $</div>